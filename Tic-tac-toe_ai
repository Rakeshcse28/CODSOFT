âœ… TASK 2: Tic-Tac-Toe AI using Minimax

ðŸ”¹ Goal:

Create an unbeatable AI using the Minimax algorithm.

âœ… Sample Code (Python):

import math

def print_board(board):
    for row in board:
        print("|".join(row))
    print()

def check_winner(board):
    for row in board:
        if row.count(row[0]) == 3 and row[0] != "_":
            return row[0]
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != "_":
            return board[0][col]
    if board[0][0] == board[1][1] == board[2][2] != "_":
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != "_":
        return board[0][2]
    return None

def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == "O":
        return 1
    elif winner == "X":
        return -1
    elif all(cell != "_" for row in board for cell in row):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == "_":
                    board[i][j] = "O"
                    score = minimax(board, depth + 1, False)
                    board[i][j] = "_"
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == "_":
                    board[i][j] = "X"
                    score = minimax(board, depth + 1, True)
                    board[i][j] = "_"
                    best_score = min(score, best_score)
        return best_score

def best_move(board):
    best_score = -math.inf
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == "_":
                board[i][j] = "O"
                score = minimax(board, 0, False)
                board[i][j] = "_"
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

# Game loop
board = [["_"] * 3 for _ in range(3)]
print("You are X. AI is O.")
print_board(board)

while True:
    # Human move
    x, y = map(int, input("Enter your move (row col): ").split())
    if board[x][y] == "_":
        board[x][y] = "X"
    else:
        print("Invalid move.")
        continue

    winner = check_winner(board)
    if winner or all(cell != "_" for row in board for cell in row):
        break

    # AI move
    move = best_move(board)
    if move:
        board[move[0]][move[1]] = "O"

    print_board(board)

    winner = check_winner(board)
    if winner or all(cell != "_" for row in board for cell in row):
        break

print_board(board)
if winner:
    print(f"Winner is {winner}")
else:
    print("It's a draw!")

output:
You are X. AI is O.
_|_|_
_|_|_
_|_|_

Enter your move (row col): 0 0
O|_|_
_|_|_
_|_|_

Enter your move (row col): 1 1
O|_|_
_|X|_
_|_|_

Enter your move (row col): 0 1
O|X|_
_|X|_
_|_|O

Enter your move (row col): 2 1
O|X|_
_|X|_
_|X|O

Winner is X
